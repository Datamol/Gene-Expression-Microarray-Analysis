
###############################################
#### Data normalization and transformation ####
###############################################

#### Preprocessing of Affymetric data

# http://jura.wi.mit.edu/bio/education/bioinfo2007/arrays/array_exercises_1R.html

source("http://bioconductor.org/biocLite.R")
?biocLite
biocLite()

biocLite("affy")
library(affy)
#Read the CEL files (first command below) and then summarize and normalize with MAS5 (second command below). This could take a few minutes.
getwd()
setwd("C:/2 iWorld/0 R Coding for interview/Gene expression/MIT microarray course")
affy.data = ReadAffy()
eset.mas5 = mas5(affy.data)

#The variable 'eset.mas5' contains normalized expression values for all probesets, along with other information. 
#Let's continue by getting the expression matrix (probesets/genes in rows, chips in columns).
exprSet.nologs = exprs(eset.mas5)
# List the column (chip) names
colnames(exprSet.nologs)
# Rename the column names if we want
colnames(exprSet.nologs) = c("brain.1", "brain.2", 
                             "fetal.brain.1", "fetal.brain.2",
                             "fetal.liver.1", "fetal.liver.2", 
                             "liver.1", "liver.2")

#log-transform the expression values to get a more normal distribution 
#Logarithms can use any base, but base 2 is easiest when transforming ratios, since transformed 2-fold ratios up or down will be +1 or -1

exprSet = log(exprSet.nologs, 2)

# ++++
#Optional. In place of step 10/ line 15 above, we could choose many other ways to preprocess the data, such as RMA (which outputs log2-transformed expression values)
eset.rma = justRMA()
#or GCRMA (which also outputs log2-transformed expression values)
library(gcrma)
eset.gcrma = justGCRMA()
#or dChip (also known as MBEI; not log-transformed)
eset.dChip = expresso(affy.data, normalize.method="invariantset", 
                      bg.correct=FALSE, pmcorrect.method="pmonly",summary.method="liwong")
# ++++

# print out our expression matrix (as with most data), we can use a command like
write.table(exprSet, file="Su_mas5_matrix.txt", quote=F, sep="\t")

#let's calculate an Absent/Present call for each probeset.
# Run the Affy A/P call algorithm on the CEL files we processed above
data.mas5calls = mas5calls(affy.data)
# Get the actual A/P calls
data.mas5calls.calls = exprs(data.mas5calls)
# Print the calls as a matrix
write.table(data.mas5calls.calls, file="Su_mas5calls.txt", quote=F, sep="\t")


#### I: Normalization of data

# Why normalize? Chips may have been hybridized to different amounts of RNA, for different amounts of time, with different batches of solutions, etc. 
#Normalization should remove systematic biases and make any comparisons between chips more meaningful

#  Su_raw_matrix.txt, an unnormalized matrix of the same Su data

exprSetRaw = read.delim("Su_raw_matrix.txt")

#Calculate the trimmed mean of all expression values on each chip.
#A trimmed mean calculates a summary value that is somewhere between the mean and median of the set of values.
#We remove the top and bottom 2% of values (for example), and find the mean of the remaining values,
#To get the trimmed mean of column 1 on our matrix, we can use a command like
trmean.col.1 = mean(exprSetRaw[,1], trim=0.02)

#This command to all columns at once with the "apply" command, where the '2' means to run the command on all columns (and '1' would be to do the same thing on all rows).
trmean = apply(exprSetRaw, 2, mean, trim=0.02)
trmean

# the variation between genes on each chip, we can find the standard deviation for each chip
sd = apply(exprSetRaw, 2, sd)
sd
#Or we could compare medians
median = apply(exprSetRaw, 2, median)
median

#Divide all expression values by the mean for that chip, and multiply by a scaling factor, such as the mean of the trimmed means.
mean.of.trmeans = mean(trmean)
exprSet.trmean = exprSetRaw / trmean * mean.of.trmeans

#Print the data that's been normalized by the global trimmed mean
write.table(exprSet.trmean, file="Su_mas5_trmean_norm.txt", quote=F, sep="\t")

# Rename your data
exprSet = exprSet.trmean

# Quantile normalization is often too extreme, but it's common for Affymetrix probe-level normalization (being part of MAS5). If you wish to use it, one way is to use a command from the "limma" package
library(limma)
exprSet.quantile = normalizeQuantiles(exprSet)

## Another common normalization choice (generally for 2-color arrays) is loess. We combined the "brain.1" and "fetal.brain.1" expression data into a file that we can pretend is 2-color data (together with 0 values for "background"). 
#Then we can normalize it with loess

#Read this fake 2-color file, indicating the columns for the Red and Green channels and the Red and Green backgrounds.
brain.fetalbrain.2color = read.maimages("brain.fetalbrain.2color.data.txt", 
                                        columns=list(G="brain.1", R="fetal.brain.1", Gb="bg1", Rb="bg2"))
#Now we have the two channels of data which we can loess normalize
brain.fetalbrain.2color.loess = 
  normalizeWithinArrays(brain.fetalbrain.2color, method="loess")

#How do you know if anything changed? Print an MA plot before and after normalization
# Set up a page with two figures next to each other
par(mfrow=c(1,2))
# Print the figures
plotMA(brain.fetalbrain.2color)
plotMA(brain.fetalbrain.2color.loess)

#### II: Part II. Calculating log2 ratios
?apply

#Calculate the mean of each pair of replicated experiments (converting 8 chips to 4 means).
brain.mean = apply(exprSet[, c(1, 2)], 1, mean)  # brain.1 and brain.2
fetal.brain.mean = apply(exprSet[, c(3,4)], 1, mean) #"fetal.brain.1", "fetal.brain.2"
liver.mean = apply(exprSet[, c(7,8)], 1, mean) #"liver.1", "liver.2"
fetal.liver.mean = apply(exprSet[, c(5,6)], 1, mean) #"fetal.liver.1", "fetal.liver.2"

#Calculate the ratios (for both brain and liver) of fetal tissue / adult tissue (converting 4 experiments to 2 ratios). Since we've already log-transformed the expression values, we need to use the fact that log(A / B) = log(A) - log(B)
brain.fetal.to.adult = fetal.brain.mean - brain.mean
liver.fetal.to.adult = fetal.liver.mean - liver.mean

##### III: Put all the data together

#We could print all of our types of data into separate files or else combine columns together to get one big file. Let's try the latter, using the "cbind" (column bind) command:
all.data = cbind(exprSet, brain.mean, fetal.brain.mean, liver.mean, fetal.liver.mean,
brain.fetal.to.adult, liver.fetal.to.adult)

# Check what data we have here
colnames(all.data)
#Print all our data to a file.
write.table(all.data, file="Microarray_Analysis_data_1_SOLUTION.txt", quote=F, sep="\t")
